{"version":3,"file":"index.cjs.js","sources":["../src/hasura-storage-api.ts","../src/hasura-storage-client.ts","../src/machines/file-upload.ts","../src/machines/multiple-files-upload.ts","../src/promises/file-upload.ts","../src/promises/multiple-files-upload.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport axios, { AxiosInstance } from 'axios'\n\nimport {\n  ApiDeleteParams,\n  ApiDeleteResponse,\n  ApiGetPresignedUrlParams,\n  ApiGetPresignedUrlResponse,\n  ApiUploadParams,\n  ApiUploadResponse,\n  UploadHeaders\n} from './utils/types'\n\n/**\n * @internal\n * This is an internal class.\n */\nexport class HasuraStorageApi {\n  private url: string\n  private httpClient: AxiosInstance\n  private accessToken?: string\n  private adminSecret?: string\n\n  constructor({ url }: { url: string }) {\n    this.url = url\n\n    this.httpClient = axios.create({\n      baseURL: this.url,\n      maxBodylength: Infinity\n    })\n  }\n\n  async upload(params: ApiUploadParams): Promise<ApiUploadResponse> {\n    const { formData } = params\n\n    try {\n      const res = await this.httpClient.post('/files', formData, {\n        headers: {\n          ...this.generateUploadHeaders(params),\n          ...this.generateAuthHeaders(),\n          'Content-Type': 'multipart/form-data'\n        }\n      })\n\n      return { fileMetadata: res.data, error: null }\n    } catch (error) {\n      return { fileMetadata: null, error: error as Error }\n    }\n  }\n\n  async getPresignedUrl(params: ApiGetPresignedUrlParams): Promise<ApiGetPresignedUrlResponse> {\n    try {\n      const { fileId } = params\n      const res = await this.httpClient.get(`/files/${fileId}/presignedurl`, {\n        headers: {\n          ...this.generateAuthHeaders()\n        }\n      })\n      return { presignedUrl: res.data, error: null }\n    } catch (error) {\n      return { presignedUrl: null, error: error as Error }\n    }\n  }\n\n  async delete(params: ApiDeleteParams): Promise<ApiDeleteResponse> {\n    try {\n      const { fileId } = params\n      await this.httpClient.delete(`/files/${fileId}`, {\n        headers: {\n          ...this.generateAuthHeaders()\n        }\n      })\n      return { error: null }\n    } catch (error) {\n      return { error: error as Error }\n    }\n  }\n\n  /**\n   * Set the access token to use for authentication.\n   *\n   * @param accessToken Access token\n   * @returns Hasura Storage API instance\n   */\n  setAccessToken(accessToken?: string): HasuraStorageApi {\n    this.accessToken = accessToken\n\n    return this\n  }\n\n  /**\n   * Set the admin secret to use for authentication.\n   *\n   * @param adminSecret Hasura admin secret\n   * @returns Hasura Storage API instance\n   */\n  setAdminSecret(adminSecret?: string): HasuraStorageApi {\n    this.adminSecret = adminSecret\n\n    return this\n  }\n\n  private generateUploadHeaders(params: ApiUploadParams): UploadHeaders {\n    const { bucketId, name, id } = params\n    const uploadheaders: UploadHeaders = {}\n\n    if (bucketId) {\n      uploadheaders['x-nhost-bucket-id'] = bucketId\n    }\n    if (id) {\n      uploadheaders['x-nhost-file-id'] = id\n    }\n    if (name) {\n      uploadheaders['x-nhost-file-name'] = name\n    }\n\n    return uploadheaders\n  }\n\n  private generateAuthHeaders():\n    | { Authorization: string }\n    | { 'x-hasura-admin-secret': string }\n    | null {\n    if (!this.adminSecret && !this.accessToken) {\n      return null\n    }\n\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n\n    return {\n      Authorization: `Bearer ${this.accessToken}`\n    }\n  }\n}\n","import FormData from 'form-data'\n\nimport {\n  StorageDeleteParams,\n  StorageDeleteResponse,\n  StorageGetPresignedUrlParams,\n  StorageGetPresignedUrlResponse,\n  StorageGetUrlParams,\n  StorageUploadFileParams,\n  StorageUploadFormDataParams,\n  StorageUploadParams,\n  StorageUploadResponse\n} from './utils/types'\nimport { HasuraStorageApi } from './hasura-storage-api'\n\ninterface NhostStorageConstructorParams {\n  /**\n   * Storage endpoint.\n   */\n  url: string\n  /**\n   * Admin secret. When set, it is sent as an `x-hasura-admin-secret` header for all requests.\n   */\n  adminSecret?: string\n}\n/**\n * @alias Storage\n */\nexport class HasuraStorageClient {\n  readonly url: string\n  private api: HasuraStorageApi\n\n  constructor({ url, adminSecret }: NhostStorageConstructorParams) {\n    this.url = url\n    this.api = new HasuraStorageApi({ url })\n    this.setAdminSecret(adminSecret)\n  }\n\n  /**\n   * Use `nhost.storage.upload` to upload a file. \n   * \n   * It's possible to use [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) or [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) to upload a file. The `File` instance is only available in the browser while `FormData` with [`form-data`](https://www.npmjs.com/package/form-data) works both in the browser and in NodeJS (server).\n   * \n   * If no `bucketId` is specified the bucket `default` is used.\n   *\n   * @example\n   * \n   * Upload a file from a browser using `File`.\n   * \n   * ```ts\n   * await nhost.storage.upload({ file })\n   * ```\n   * \n   * Upload a file from a browser using `File` to a specific Bucket.\n   * \n    @example\n   * ```ts\n   * await nhost.storage.upload({ file, bucketId: '<Bucket-ID>' })\n   * ```\n   * \n   * Upload a file from a server using `FormData` with [`form-data`](https://www.npmjs.com/package/form-data).\n   *\n   * @example\n   * ```ts\n   * const fd = new FormData() \n   * fd.append('file', fs.createReadStream('./tests/assets/sample.pdf'))\n   * \n   * await storage.upload({\n   *   formData: fd\n   * })\n   * ```\n   * \n   * @docs https://docs.nhost.io/reference/javascript/storage/upload\n   */\n\n  async upload(params: StorageUploadFileParams): Promise<StorageUploadResponse>\n  async upload(params: StorageUploadFormDataParams): Promise<StorageUploadResponse>\n  async upload(params: StorageUploadParams): Promise<StorageUploadResponse> {\n    let formData: FormData\n\n    if ('file' in params) {\n      formData = new FormData()\n      formData.append('file', params.file)\n    } else {\n      formData = params.formData\n    }\n\n    const { fileMetadata, error } = await this.api.upload({\n      ...params,\n      formData: formData\n    })\n    if (error) {\n      return { fileMetadata: null, error }\n    }\n\n    if (!fileMetadata) {\n      return { fileMetadata: null, error: new Error('Invalid file returned') }\n    }\n\n    return { fileMetadata, error: null }\n  }\n\n  /**\n   * @deprecated Use `nhost.storage.getPublicUrl()` instead.\n   */\n  getUrl(params: StorageGetUrlParams): string {\n    return this.getPublicUrl(params)\n  }\n\n  /**\n   * Use `nhost.storage.getPublicUrl` to get the public URL of a file. The public URL can be used for un-authenticated users to access files. To access public files the `public` role must have permissions to select the file in the `storage.files` table.\n   *\n   * @example\n   * ```ts\n   * const publicUrl = nhost.storage.getPublicUrl({ fileId: '<File-ID>' })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/get-public-url\n   */\n  getPublicUrl(params: StorageGetUrlParams): string {\n    const { fileId } = params\n    return `${this.url}/files/${fileId}`\n  }\n\n  /**\n   * Use `nhost.storage.getPresignedUrl` to get a presigned URL of a file. To get a presigned URL the user must have permission to select the file in the `storage.files` table.\n   *\n   * @example\n   * ```ts\n   * const { presignedUrl, error} = await nhost.storage.getPresignedUrl({ fileId: '<File-ID>' })\n   *\n   * if (error) {\n   *   throw error;\n   * }\n   *\n   * console.log('url: ', presignedUrl.url)\n   * console.log('expiration: ', presignedUrl.expiration)\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/get-presigned-url\n   */\n  async getPresignedUrl(\n    params: StorageGetPresignedUrlParams\n  ): Promise<StorageGetPresignedUrlResponse> {\n    const { presignedUrl, error } = await this.api.getPresignedUrl(params)\n    if (error) {\n      return { presignedUrl: null, error }\n    }\n\n    if (!presignedUrl) {\n      return { presignedUrl: null, error: new Error('Invalid file id') }\n    }\n\n    return { presignedUrl, error: null }\n  }\n\n  /**\n   * Use `nhost.storage.delete` to delete a file. To delete a file the user must have permissions to delete the file in the `storage.files` table. Deleting the file using `nhost.storage.delete()` will delete both the file and its metadata.\n   *\n   * @example\n   * ```ts\n   * const { error } = await nhost.storage.delete({ fileId: 'uuid' })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/delete\n   */\n  async delete(params: StorageDeleteParams): Promise<StorageDeleteResponse> {\n    const { error } = await this.api.delete(params)\n    if (error) {\n      return { error }\n    }\n\n    return { error: null }\n  }\n\n  /**\n   * Use `nhost.storage.setAccessToken` to a set an access token to be used in subsequent storage requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.storage.setAccessToken('some-access-token')\n   * ```\n   *\n   * @param accessToken Access token\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/set-access-token\n   */\n  setAccessToken(accessToken?: string): HasuraStorageClient {\n    this.api.setAccessToken(accessToken)\n\n    return this\n  }\n\n  /**\n   * Use `nhost.storage.adminSecret` to set the admin secret to be used for subsequent storage requests. This is useful if you want to run storage in \"admin mode\".\n   *\n   * @example\n   * ```ts\n   * nhost.storage.setAdminSecret('some-admin-secret')\n   * ```\n   *\n   * @param adminSecret Hasura admin secret\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/set-admin-secret\n   */\n  setAdminSecret(adminSecret?: string): HasuraStorageClient {\n    this.api.setAdminSecret(adminSecret)\n\n    return this\n  }\n}\n","import axios, { AxiosError, AxiosRequestHeaders } from 'axios'\nimport { assign, createMachine } from 'xstate'\n\nimport { ErrorPayload } from '@nhost/core'\n\nexport type FileUploadContext = {\n  progress: number | null\n  loaded: number\n  error: ErrorPayload | null\n  id?: string\n  bucketId?: string\n  file?: File\n}\n\nexport type FileUploadEvents =\n  | { type: 'ADD'; file: File; id?: string; bucketId?: string; name?: string }\n  | {\n      type: 'UPLOAD'\n      url: string\n      file?: File\n      id?: string\n      bucketId?: string\n      name?: string\n      accessToken?: string\n      adminSecret?: string\n    }\n  | { type: 'UPLOAD_PROGRESS'; progress: number; loaded: number; additions: number }\n  | { type: 'UPLOAD_DONE'; id: string; bucketId: string }\n  | { type: 'UPLOAD_ERROR'; error: ErrorPayload }\n  | { type: 'CANCEL' }\n  | { type: 'DESTROY' }\n\nexport const INITIAL_FILE_CONTEXT: FileUploadContext = { progress: null, loaded: 0, error: null }\n\nexport type FileUploadMachine = ReturnType<typeof createFileUploadMachine>\nexport const createFileUploadMachine = () =>\n  createMachine(\n    {\n      predictableActionArguments: true,\n      schema: {\n        context: {} as FileUploadContext,\n        events: {} as FileUploadEvents\n      },\n      tsTypes: {} as import('./file-upload.typegen').Typegen0,\n      context: { ...INITIAL_FILE_CONTEXT },\n      initial: 'idle',\n      on: {\n        DESTROY: { actions: 'sendDestroy', target: 'stopped' }\n      },\n      states: {\n        idle: {\n          on: {\n            ADD: { actions: 'addFile' },\n            UPLOAD: { cond: 'hasFile', target: 'uploading' }\n          }\n        },\n        uploading: {\n          entry: 'resetProgress',\n          on: {\n            UPLOAD_PROGRESS: { actions: ['incrementProgress', 'sendProgress'] },\n            UPLOAD_DONE: 'uploaded',\n            UPLOAD_ERROR: 'error',\n            CANCEL: 'idle'\n          },\n          invoke: { src: 'uploadFile' }\n        },\n        uploaded: { entry: ['setFileMetadata', 'sendDone'] },\n        error: { entry: ['setError', 'sendError'] },\n        stopped: { type: 'final' }\n      }\n    },\n    {\n      guards: {\n        hasFile: (context, event) => !!context.file || !!event.file\n      },\n\n      actions: {\n        incrementProgress: assign({\n          loaded: (_, { loaded }) => loaded,\n          progress: (_, { progress }) => progress\n        }),\n        setFileMetadata: assign({\n          id: (_, { id }) => id,\n          bucketId: (_, { bucketId }) => bucketId,\n          progress: (_) => 100\n        }),\n        setError: assign({ error: (_, { error }) => error }),\n        sendProgress: () => {},\n        sendError: () => {},\n        sendDestroy: () => {},\n        sendDone: () => {},\n        resetProgress: assign({ progress: (_) => null, loaded: (_) => 0 }),\n        addFile: assign({\n          file: (_, { file }) => file,\n          bucketId: (_, { bucketId }) => bucketId,\n          id: (_, { id }) => id\n        })\n      },\n      services: {\n        uploadFile: (context, event) => (callback) => {\n          const headers: AxiosRequestHeaders = {\n            'Content-Type': 'multipart/form-data'\n          }\n          const fileId = event.id || context.id\n          if (fileId) {\n            headers['x-nhost-file-id'] = fileId\n          }\n          const bucketId = event.bucketId || context.bucketId\n          if (bucketId) {\n            headers['x-nhost-bucket-id'] = bucketId\n          }\n          const file = (event.file || context.file)!\n          headers['x-nhost-file-name'] = event.name || file.name\n          const data = new FormData()\n          data.append('file', file)\n          if (event.adminSecret) {\n            headers['x-hasura-admin-secret'] = event.adminSecret\n          }\n          if (event.accessToken) {\n            headers['Authorization'] = `Bearer ${event.accessToken}`\n          }\n          let currentLoaded = 0\n          const controller = new AbortController()\n          axios\n            .post<{\n              bucketId: string\n              createdAt: string\n              etag: string\n              id: string\n              isUploaded: true\n              mimeType: string\n              name: string\n              size: number\n              updatedAt: string\n              uploadedByUserId: string\n            }>(event.url + '/files', data, {\n              headers,\n              signal: controller.signal,\n              onUploadProgress: (event: ProgressEvent) => {\n                const loaded = Math.round((event.loaded * file.size!) / event.total)\n                const additions = loaded - currentLoaded\n                currentLoaded = loaded\n                callback({\n                  type: 'UPLOAD_PROGRESS',\n                  progress: Math.round((loaded * 100) / event.total),\n                  loaded,\n                  additions\n                })\n              }\n            })\n            .then(({ data: { id, bucketId } }) => {\n              callback({ type: 'UPLOAD_DONE', id, bucketId })\n            })\n            .catch(({ response, message }: AxiosError<{ error?: { message: string } }>) => {\n              callback({\n                type: 'UPLOAD_ERROR',\n                error: {\n                  status: response?.status ?? 0,\n                  message: response?.data?.error?.message || message,\n                  // TODO errors from hasura-storage are not codified\n                  error: response?.data?.error?.message || message\n                }\n              })\n            })\n\n          return () => {\n            controller.abort()\n          }\n        }\n      }\n    }\n  )\n","import { actions, ActorRefFrom, assign, createMachine, send, spawn } from 'xstate'\n\nimport { createFileUploadMachine, FileUploadMachine, INITIAL_FILE_CONTEXT } from './file-upload'\n\nconst { pure, sendParent } = actions\n\nexport type FileItemRef = ActorRefFrom<FileUploadMachine>\n\nexport type AnyFileList = File | File[] | FileList\n\nexport type MultipleFilesUploadContext = {\n  progress: number | null\n  files: FileItemRef[]\n  loaded: number\n  total: number\n}\n\nexport type MultipleFilesUploadEvents =\n  | { type: 'ADD'; files: AnyFileList; bucketId?: string }\n  | {\n      type: 'UPLOAD'\n      url: string\n      files?: AnyFileList\n      bucketId?: string\n      accessToken?: string\n      adminSecret?: string\n    }\n  | { type: 'UPLOAD_PROGRESS'; additions: number }\n  | { type: 'UPLOAD_DONE' }\n  | { type: 'UPLOAD_ERROR' }\n  | { type: 'CANCEL' }\n  | { type: 'REMOVE' }\n  | { type: 'CLEAR' }\n\nexport type MultipleFilesUploadMachine = ReturnType<typeof createMultipleFilesUploadMachine>\n\nexport const createMultipleFilesUploadMachine = () => {\n  return createMachine(\n    {\n      id: 'files-list',\n      schema: {\n        context: {} as MultipleFilesUploadContext,\n        events: {} as MultipleFilesUploadEvents\n      },\n      tsTypes: {} as import('./multiple-files-upload.typegen').Typegen0,\n      predictableActionArguments: true,\n      context: {\n        progress: null,\n        files: [],\n        loaded: 0,\n        total: 0\n      },\n      initial: 'idle',\n      on: {\n        UPLOAD: { cond: 'hasFileToDownload', actions: 'addItem', target: 'uploading' },\n        ADD: { actions: 'addItem' },\n        REMOVE: { actions: 'removeItem' }\n      },\n      states: {\n        idle: {\n          entry: ['resetProgress', 'resetLoaded', 'resetTotal'],\n          on: {\n            CLEAR: { actions: 'clearList', target: 'idle' }\n          }\n        },\n        uploading: {\n          entry: ['upload', 'startProgress', 'resetLoaded', 'resetTotal'],\n          on: {\n            UPLOAD_PROGRESS: { actions: ['incrementProgress'] },\n            UPLOAD_DONE: [\n              { cond: 'isAllUploaded', target: 'uploaded' },\n              { cond: 'isAllUploadedOrError', target: 'error' }\n            ],\n            UPLOAD_ERROR: [\n              { cond: 'isAllUploaded', target: 'uploaded' },\n              { cond: 'isAllUploadedOrError', target: 'error' }\n            ],\n            CANCEL: { actions: 'cancel', target: 'idle' }\n          }\n        },\n        uploaded: {\n          entry: 'setUploaded',\n          on: {\n            CLEAR: { actions: 'clearList', target: 'idle' }\n          }\n        },\n        error: {\n          on: {\n            CLEAR: { actions: 'clearList', target: 'idle' }\n          }\n        }\n      }\n    },\n    {\n      guards: {\n        hasFileToDownload: (context, event) =>\n          context.files.some((ref) => ref.getSnapshot()!.matches('idle')) || !!event.files,\n        isAllUploaded: (context) =>\n          context.files.every((item) => item.getSnapshot()?.matches('uploaded')),\n        isAllUploadedOrError: (context) =>\n          context.files.every((item) => {\n            const snap = item.getSnapshot()\n            return snap?.matches('error') || snap?.matches('uploaded')\n          })\n      },\n\n      actions: {\n        incrementProgress: assign((context, event) => {\n          const loaded: number = context.loaded + event.additions\n          const progress = Math.round((loaded * 100) / context.total)\n          return { ...context, loaded, progress }\n        }),\n        setUploaded: assign({\n          progress: (_) => 100,\n          loaded: ({ files }) =>\n            files\n              .map((ref) => ref.getSnapshot()!)\n              .filter((snap) => snap.matches('uploaded'))\n              .reduce((agg, curr) => agg + curr.context.file?.size!, 0)\n        }),\n        resetTotal: assign({\n          total: ({ files }) =>\n            files\n              .map((ref) => ref.getSnapshot()!)\n              .filter((snap) => !snap.matches('uploaded'))\n              .reduce((agg, curr) => agg + curr.context.file?.size!, 0)\n        }),\n        resetLoaded: assign({ loaded: (_) => 0 }),\n        startProgress: assign({ progress: (_) => 0 }),\n        resetProgress: assign({ progress: (_) => null }),\n        addItem: assign((context, { files, bucketId }) => {\n          const additions = files\n            ? Array.isArray(files)\n              ? files // File[]\n              : 'length' in files // FileList\n              ? Array.from(files)\n              : [files] // File\n            : [] // No file\n          const total = context.total + additions.reduce((agg, curr) => agg + curr.size, 0)\n          const progress = Math.round((context.loaded * 100) / total)\n          return {\n            files: [\n              ...context.files,\n              ...additions.map((file) =>\n                spawn(\n                  createFileUploadMachine()\n                    .withConfig({\n                      actions: {\n                        sendProgress: sendParent((_, { additions }) => ({\n                          type: 'UPLOAD_PROGRESS',\n                          additions\n                        })),\n                        sendDone: sendParent('UPLOAD_DONE'),\n                        sendError: sendParent('UPLOAD_ERROR'),\n                        sendDestroy: sendParent('REMOVE')\n                      }\n                    })\n                    .withContext({ ...INITIAL_FILE_CONTEXT, file, bucketId }),\n                  { sync: true }\n                )\n              )\n            ],\n            total,\n            loaded: context.loaded,\n            progress\n          }\n        }),\n        removeItem: assign({\n          files: (context) =>\n            context.files.filter((ref) => {\n              const stopped = ref.getSnapshot()?.matches('stopped')\n              if (stopped) {\n                ref.stop?.()\n              }\n              return !stopped\n            })\n        }),\n        clearList: pure((context) =>\n          context.files.map((ref) => send({ type: 'DESTROY' }, { to: ref.id }))\n        ),\n        upload: pure((context, event) => context.files.map((ref) => send(event, { to: ref.id }))),\n        cancel: pure((context) =>\n          context.files.map((ref) => send({ type: 'CANCEL' }, { to: ref.id }))\n        )\n      }\n    }\n  )\n}\n","import { InterpreterFrom } from 'xstate'\n\nimport { ActionErrorState } from '@nhost/core'\n\nimport { FileItemRef, FileUploadMachine } from '../machines'\nimport { NhostClientReturnType, StorageUploadFileParams } from '../utils/types'\n\nexport interface UploadProgressState {\n  /**\n   * Returns `true` when the file is being uploaded.\n   */\n  isUploading: boolean\n  /**\n   * Returns the progress of the upload, from 0 to 100. Returns null if the upload has not started yet.\n   */\n  progress: number | null\n}\n\nexport interface UploadFileHandlerResult extends ActionErrorState {\n  /**\n   * Returns `true` when the file has been successfully uploaded.\n   */\n  isUploaded: boolean\n  /**\n   * Returns the id of the file.\n   */\n  id?: string\n  /**\n   * Returns the bucket id.\n   */\n  bucketId?: string\n  /**\n   * Returns the name of the file.\n   */\n  name?: string\n}\n\nexport interface FileUploadState extends UploadFileHandlerResult, UploadProgressState {}\n\nexport const uploadFilePromise = async (\n  nhost: NhostClientReturnType,\n  interpreter: FileItemRef | InterpreterFrom<FileUploadMachine>,\n  params: Partial<StorageUploadFileParams>\n): Promise<UploadFileHandlerResult> =>\n  new Promise<UploadFileHandlerResult>((resolve) => {\n    interpreter.send({\n      type: 'UPLOAD',\n      url: nhost.storage.url,\n      accessToken: nhost.auth.getAccessToken(),\n      adminSecret: nhost.adminSecret,\n      ...params\n    })\n    interpreter.subscribe((s) => {\n      if (s.matches('error')) {\n        resolve({\n          error: s.context.error,\n          isError: true,\n          isUploaded: false\n        })\n      } else if (s.matches('uploaded')) {\n        resolve({\n          error: null,\n          isError: false,\n          isUploaded: true,\n          id: s.context.id,\n          bucketId: s.context.id,\n          name: s.context.file?.name\n        })\n      }\n    })\n  })\n","import { InterpreterFrom } from 'xstate'\n\nimport { AnyFileList, FileItemRef, MultipleFilesUploadMachine } from '../machines'\nimport { NhostClientReturnType } from '../utils/types'\n\nexport interface MultipleUploadProgressState {\n  /**\n   * Returns `true` when the files are being uploaded.\n   */\n  isUploading: boolean\n  /**\n   * Returns the overall progress of the upload, from 0 to 100. Returns null if the upload has not started yet.\n   */\n  progress: number | null\n}\n\nexport interface MultipleFilesHandlerResult {\n  /**\n   * The list of file uploads. The properties can be accessed through `item.getSnapshot()` of with the `useFileUploadItem` hook.\n   */\n  files: FileItemRef[]\n  /**\n   * Returns `true` when all upload request are processed, but at least one of them has failed.\n   */\n  isError: boolean\n  /**\n   * Returns the list of file uploads that have failed\n   */\n  errors: FileItemRef[]\n}\n\nexport interface MultipleFilesUploadState\n  extends MultipleFilesHandlerResult,\n    MultipleUploadProgressState {\n  /**\n   * Returns `true` when all the files have been successfully uploaded.\n   */\n  isUploaded: boolean\n}\n\nexport type UploadMultipleFilesActionParams = {\n  files?: AnyFileList\n  bucketId?: string\n}\n\nexport const uploadMultipleFilesPromise = async (\n  nhost: NhostClientReturnType,\n  service: InterpreterFrom<MultipleFilesUploadMachine>,\n  params?: UploadMultipleFilesActionParams\n): Promise<MultipleFilesHandlerResult> =>\n  new Promise((resolve) => {\n    service.send({\n      type: 'UPLOAD',\n      url: nhost.storage.url,\n      accessToken: nhost.auth.getAccessToken(),\n      adminSecret: nhost.adminSecret,\n      bucketId: params?.bucketId,\n      files: params?.files\n    })\n    service.onTransition((s) => {\n      if (s.matches('error')) {\n        resolve({\n          errors: s.context.files.filter((ref) => ref.getSnapshot()?.context.error),\n          isError: true,\n          files: []\n        })\n      } else if (s.matches('uploaded')) {\n        resolve({ errors: [], isError: false, files: s.context.files })\n      }\n    })\n  })\n"],"names":["HasuraStorageApi","url","__publicField","axios","params","formData","error","fileId","accessToken","adminSecret","bucketId","name","id","uploadheaders","HasuraStorageClient","FormData","fileMetadata","presignedUrl","INITIAL_FILE_CONTEXT","createFileUploadMachine","createMachine","context","event","assign","_","loaded","progress","file","callback","headers","data","currentLoaded","controller","additions","response","message","_a","_c","_b","_e","_d","pure","sendParent","actions","createMultipleFilesUploadMachine","ref","item","snap","files","agg","curr","total","spawn","stopped","send","uploadFilePromise","nhost","interpreter","resolve","s","uploadMultipleFilesPromise","service"],"mappings":"8ZAiBO,MAAMA,CAAiB,CAM5B,YAAY,CAAE,IAAAC,GAAwB,CAL9BC,EAAA,YACAA,EAAA,mBACAA,EAAA,oBACAA,EAAA,oBAGN,KAAK,IAAMD,EAEN,KAAA,WAAaE,UAAM,OAAO,CAC7B,QAAS,KAAK,IACd,cAAe,GAAA,CAChB,CACH,CAEA,MAAM,OAAOC,EAAqD,CAC1D,KAAA,CAAE,SAAAC,CAAa,EAAAD,EAEjB,GAAA,CASF,MAAO,CAAE,cARG,MAAM,KAAK,WAAW,KAAK,SAAUC,EAAU,CACzD,QAAS,CACP,GAAG,KAAK,sBAAsBD,CAAM,EACpC,GAAG,KAAK,oBAAoB,EAC5B,eAAgB,qBAClB,CAAA,CACD,GAE0B,KAAM,MAAO,IAAK,QACtCE,GACA,MAAA,CAAE,aAAc,KAAM,MAAAA,EAC/B,CACF,CAEA,MAAM,gBAAgBF,EAAuE,CACvF,GAAA,CACI,KAAA,CAAE,OAAAG,CAAW,EAAAH,EAMnB,MAAO,CAAE,cALG,MAAM,KAAK,WAAW,IAAI,UAAUG,iBAAuB,CACrE,QAAS,CACP,GAAG,KAAK,oBAAoB,CAC9B,CAAA,CACD,GAC0B,KAAM,MAAO,IAAK,QACtCD,GACA,MAAA,CAAE,aAAc,KAAM,MAAAA,EAC/B,CACF,CAEA,MAAM,OAAOF,EAAqD,CAC5D,GAAA,CACI,KAAA,CAAE,OAAAG,CAAW,EAAAH,EACnB,aAAM,KAAK,WAAW,OAAO,UAAUG,IAAU,CAC/C,QAAS,CACP,GAAG,KAAK,oBAAoB,CAC9B,CAAA,CACD,EACM,CAAE,MAAO,YACTD,GACP,MAAO,CAAE,MAAAA,CAAsB,CACjC,CACF,CAQA,eAAeE,EAAwC,CACrD,YAAK,YAAcA,EAEZ,IACT,CAQA,eAAeC,EAAwC,CACrD,YAAK,YAAcA,EAEZ,IACT,CAEQ,sBAAsBL,EAAwC,CACpE,KAAM,CAAE,SAAAM,EAAU,KAAAC,EAAM,GAAAC,CAAA,EAAOR,EACzBS,EAA+B,CAAA,EAErC,OAAIH,IACFG,EAAc,qBAAuBH,GAEnCE,IACFC,EAAc,mBAAqBD,GAEjCD,IACFE,EAAc,qBAAuBF,GAGhCE,CACT,CAEQ,qBAGC,CACP,MAAI,CAAC,KAAK,aAAe,CAAC,KAAK,YACtB,KAGL,KAAK,YACA,CACL,wBAAyB,KAAK,WAAA,EAI3B,CACL,cAAe,UAAU,KAAK,aAAA,CAElC,CACF,CC7GO,MAAMC,CAAoB,CAI/B,YAAY,CAAE,IAAAb,EAAK,YAAAQ,GAA8C,CAHxDP,EAAA,YACDA,EAAA,YAGN,KAAK,IAAMD,EACX,KAAK,IAAM,IAAID,EAAiB,CAAE,IAAAC,CAAK,CAAA,EACvC,KAAK,eAAeQ,CAAW,CACjC,CAyCA,MAAM,OAAOL,EAA6D,CACpE,IAAAC,EAEA,SAAUD,GACZC,EAAW,IAAIU,EAAAA,QACNV,EAAA,OAAO,OAAQD,EAAO,IAAI,GAEnCC,EAAWD,EAAO,SAGpB,KAAM,CAAE,aAAAY,EAAc,MAAAV,CAAA,EAAU,MAAM,KAAK,IAAI,OAAO,CACpD,GAAGF,EACH,SAAAC,CAAA,CACD,EACD,OAAIC,EACK,CAAE,aAAc,KAAM,MAAAA,GAG1BU,EAIE,CAAE,aAAAA,EAAc,MAAO,MAHrB,CAAE,aAAc,KAAM,MAAO,IAAI,MAAM,uBAAuB,EAIzE,CAKA,OAAOZ,EAAqC,CACnC,OAAA,KAAK,aAAaA,CAAM,CACjC,CAYA,aAAaA,EAAqC,CAC1C,KAAA,CAAE,OAAAG,CAAW,EAAAH,EACZ,MAAA,GAAG,KAAK,aAAaG,GAC9B,CAmBA,MAAM,gBACJH,EACyC,CACnC,KAAA,CAAE,aAAAa,EAAc,MAAAX,GAAU,MAAM,KAAK,IAAI,gBAAgBF,CAAM,EACrE,OAAIE,EACK,CAAE,aAAc,KAAM,MAAAA,GAG1BW,EAIE,CAAE,aAAAA,EAAc,MAAO,MAHrB,CAAE,aAAc,KAAM,MAAO,IAAI,MAAM,iBAAiB,EAInE,CAYA,MAAM,OAAOb,EAA6D,CACxE,KAAM,CAAE,MAAAE,CAAM,EAAI,MAAM,KAAK,IAAI,OAAOF,CAAM,EAC9C,OAAIE,EACK,CAAE,MAAAA,CAAM,EAGV,CAAE,MAAO,KAClB,CAcA,eAAeE,EAA2C,CACnD,YAAA,IAAI,eAAeA,CAAW,EAE5B,IACT,CAcA,eAAeC,EAA2C,CACnD,YAAA,IAAI,eAAeA,CAAW,EAE5B,IACT,CACF,CClLO,MAAMS,EAA0C,CAAE,SAAU,KAAM,OAAQ,EAAG,MAAO,IAAK,EAGnFC,EAA0B,IACrCC,EAAA,cACE,CACE,2BAA4B,GAC5B,OAAQ,CACN,QAAS,CAAC,EACV,OAAQ,CAAC,CACX,EACA,QAAS,CAAC,EACV,QAAS,CAAE,GAAGF,CAAqB,EACnC,QAAS,OACT,GAAI,CACF,QAAS,CAAE,QAAS,cAAe,OAAQ,SAAU,CACvD,EACA,OAAQ,CACN,KAAM,CACJ,GAAI,CACF,IAAK,CAAE,QAAS,SAAU,EAC1B,OAAQ,CAAE,KAAM,UAAW,OAAQ,WAAY,CACjD,CACF,EACA,UAAW,CACT,MAAO,gBACP,GAAI,CACF,gBAAiB,CAAE,QAAS,CAAC,oBAAqB,cAAc,CAAE,EAClE,YAAa,WACb,aAAc,QACd,OAAQ,MACV,EACA,OAAQ,CAAE,IAAK,YAAa,CAC9B,EACA,SAAU,CAAE,MAAO,CAAC,kBAAmB,UAAU,CAAE,EACnD,MAAO,CAAE,MAAO,CAAC,WAAY,WAAW,CAAE,EAC1C,QAAS,CAAE,KAAM,OAAQ,CAC3B,CACF,EACA,CACE,OAAQ,CACN,QAAS,CAACG,EAASC,IAAU,CAAC,CAACD,EAAQ,MAAQ,CAAC,CAACC,EAAM,IACzD,EAEA,QAAS,CACP,kBAAmBC,EAAAA,OAAO,CACxB,OAAQ,CAACC,EAAG,CAAE,OAAAC,CAAa,IAAAA,EAC3B,SAAU,CAACD,EAAG,CAAE,SAAAE,CAAe,IAAAA,CAAA,CAChC,EACD,gBAAiBH,EAAAA,OAAO,CACtB,GAAI,CAACC,EAAG,CAAE,GAAAZ,CAAS,IAAAA,EACnB,SAAU,CAACY,EAAG,CAAE,SAAAd,CAAe,IAAAA,EAC/B,SAAWc,GAAM,GAAA,CAClB,EACD,SAAUD,EAAAA,OAAO,CAAE,MAAO,CAACC,EAAG,CAAE,MAAAlB,CAAA,IAAYA,EAAO,EACnD,aAAc,IAAM,CAAC,EACrB,UAAW,IAAM,CAAC,EAClB,YAAa,IAAM,CAAC,EACpB,SAAU,IAAM,CAAC,EACjB,cAAeiB,EAAAA,OAAO,CAAE,SAAWC,GAAM,KAAM,OAASA,GAAM,EAAG,EACjE,QAASD,EAAAA,OAAO,CACd,KAAM,CAACC,EAAG,CAAE,KAAAG,CAAW,IAAAA,EACvB,SAAU,CAACH,EAAG,CAAE,SAAAd,CAAe,IAAAA,EAC/B,GAAI,CAACc,EAAG,CAAE,GAAAZ,CAAS,IAAAA,CAAA,CACpB,CACH,EACA,SAAU,CACR,WAAY,CAACS,EAASC,IAAWM,GAAa,CAC5C,MAAMC,EAA+B,CACnC,eAAgB,qBAAA,EAEZtB,EAASe,EAAM,IAAMD,EAAQ,GAC/Bd,IACFsB,EAAQ,mBAAqBtB,GAEzB,MAAAG,EAAWY,EAAM,UAAYD,EAAQ,SACvCX,IACFmB,EAAQ,qBAAuBnB,GAE3B,MAAAiB,EAAQL,EAAM,MAAQD,EAAQ,KAC5BQ,EAAA,qBAAuBP,EAAM,MAAQK,EAAK,KAC5C,MAAAG,EAAO,IAAI,SACZA,EAAA,OAAO,OAAQH,CAAI,EACpBL,EAAM,cACRO,EAAQ,yBAA2BP,EAAM,aAEvCA,EAAM,cACAO,EAAA,cAAmB,UAAUP,EAAM,eAE7C,IAAIS,EAAgB,EACd,MAAAC,EAAa,IAAI,gBACvB7B,OAAAA,EAAAA,QACG,KAWEmB,EAAM,IAAM,SAAUQ,EAAM,CAC7B,QAAAD,EACA,OAAQG,EAAW,OACnB,iBAAmBV,GAAyB,CACpC,MAAAG,EAAS,KAAK,MAAOH,EAAM,OAASK,EAAK,KAASL,EAAM,KAAK,EAC7DW,EAAYR,EAASM,EACXA,EAAAN,EACPG,EAAA,CACP,KAAM,kBACN,SAAU,KAAK,MAAOH,EAAS,IAAOH,EAAM,KAAK,EACjD,OAAAG,EACA,UAAAQ,CAAA,CACD,CACH,CAAA,CACD,EACA,KAAK,CAAC,CAAE,KAAM,CAAE,GAAArB,EAAI,SAAAF,CAAS,KAAQ,CACpCkB,EAAS,CAAE,KAAM,cAAe,GAAAhB,EAAI,SAAAF,EAAU,CAC/C,CAAA,EACA,MAAM,CAAC,CAAE,SAAAwB,EAAU,QAAAC,KAA2D,eACpEP,EAAA,CACP,KAAM,eACN,MAAO,CACL,QAAQQ,EAAAF,GAAA,YAAAA,EAAU,SAAV,KAAAE,EAAoB,EAC5B,UAASC,GAAAC,EAAAJ,GAAA,YAAAA,EAAU,OAAV,YAAAI,EAAgB,QAAhB,YAAAD,EAAuB,UAAWF,EAE3C,QAAOI,GAAAC,EAAAN,GAAA,YAAAA,EAAU,OAAV,YAAAM,EAAgB,QAAhB,YAAAD,EAAuB,UAAWJ,CAC3C,CAAA,CACD,CAAA,CACF,EAEI,IAAM,CACXH,EAAW,MAAM,CAAA,CAErB,CACF,CACF,CACF,ECvKI,CAAE,KAAAS,EAAM,WAAAC,CAAe,EAAAC,UAgChBC,EAAmC,IACvCxB,EAAA,cACL,CACE,GAAI,aACJ,OAAQ,CACN,QAAS,CAAC,EACV,OAAQ,CAAC,CACX,EACA,QAAS,CAAC,EACV,2BAA4B,GAC5B,QAAS,CACP,SAAU,KACV,MAAO,CAAC,EACR,OAAQ,EACR,MAAO,CACT,EACA,QAAS,OACT,GAAI,CACF,OAAQ,CAAE,KAAM,oBAAqB,QAAS,UAAW,OAAQ,WAAY,EAC7E,IAAK,CAAE,QAAS,SAAU,EAC1B,OAAQ,CAAE,QAAS,YAAa,CAClC,EACA,OAAQ,CACN,KAAM,CACJ,MAAO,CAAC,gBAAiB,cAAe,YAAY,EACpD,GAAI,CACF,MAAO,CAAE,QAAS,YAAa,OAAQ,MAAO,CAChD,CACF,EACA,UAAW,CACT,MAAO,CAAC,SAAU,gBAAiB,cAAe,YAAY,EAC9D,GAAI,CACF,gBAAiB,CAAE,QAAS,CAAC,mBAAmB,CAAE,EAClD,YAAa,CACX,CAAE,KAAM,gBAAiB,OAAQ,UAAW,EAC5C,CAAE,KAAM,uBAAwB,OAAQ,OAAQ,CAClD,EACA,aAAc,CACZ,CAAE,KAAM,gBAAiB,OAAQ,UAAW,EAC5C,CAAE,KAAM,uBAAwB,OAAQ,OAAQ,CAClD,EACA,OAAQ,CAAE,QAAS,SAAU,OAAQ,MAAO,CAC9C,CACF,EACA,SAAU,CACR,MAAO,cACP,GAAI,CACF,MAAO,CAAE,QAAS,YAAa,OAAQ,MAAO,CAChD,CACF,EACA,MAAO,CACL,GAAI,CACF,MAAO,CAAE,QAAS,YAAa,OAAQ,MAAO,CAChD,CACF,CACF,CACF,EACA,CACE,OAAQ,CACN,kBAAmB,CAACC,EAASC,IAC3BD,EAAQ,MAAM,KAAMwB,GAAQA,EAAI,cAAe,QAAQ,MAAM,CAAC,GAAK,CAAC,CAACvB,EAAM,MAC7E,cAAgBD,GACdA,EAAQ,MAAM,MAAOyB,GAAA,OAAS,OAAAV,EAAAU,EAAK,YAAA,IAAL,YAAAV,EAAoB,QAAQ,YAAW,EACvE,qBAAuBf,GACrBA,EAAQ,MAAM,MAAOyB,GAAS,CACtB,MAAAC,EAAOD,EAAK,cAClB,OAAOC,GAAA,YAAAA,EAAM,QAAQ,YAAYA,GAAA,YAAAA,EAAM,QAAQ,YAAU,CAC1D,CACL,EAEA,QAAS,CACP,kBAAmBxB,EAAA,OAAO,CAACF,EAASC,IAAU,CACtC,MAAAG,EAAiBJ,EAAQ,OAASC,EAAM,UACxCI,EAAW,KAAK,MAAOD,EAAS,IAAOJ,EAAQ,KAAK,EAC1D,MAAO,CAAE,GAAGA,EAAS,OAAAI,EAAQ,SAAAC,CAAS,CAAA,CACvC,EACD,YAAaH,EAAAA,OAAO,CAClB,SAAWC,GAAM,IACjB,OAAQ,CAAC,CAAE,MAAAwB,CACT,IAAAA,EACG,IAAKH,GAAQA,EAAI,YAAY,CAAE,EAC/B,OAAQE,GAASA,EAAK,QAAQ,UAAU,CAAC,EACzC,OAAO,CAACE,EAAKC,WAAS,OAAAD,IAAMb,EAAAc,EAAK,QAAQ,OAAb,YAAAd,EAAmB,OAAO,CAAC,CAAA,CAC7D,EACD,WAAYb,EAAAA,OAAO,CACjB,MAAO,CAAC,CAAE,MAAAyB,KACRA,EACG,IAAKH,GAAQA,EAAI,YAAc,CAAA,EAC/B,OAAQE,GAAS,CAACA,EAAK,QAAQ,UAAU,CAAC,EAC1C,OAAO,CAACE,EAAKC,WAAS,OAAAD,IAAMb,EAAAc,EAAK,QAAQ,OAAb,YAAAd,EAAmB,OAAO,CAAC,CAAA,CAC7D,EACD,YAAab,EAAO,OAAA,CAAE,OAASC,GAAM,EAAG,EACxC,cAAeD,EAAO,OAAA,CAAE,SAAWC,GAAM,EAAG,EAC5C,cAAeD,EAAO,OAAA,CAAE,SAAWC,GAAM,KAAM,EAC/C,QAASD,EAAO,OAAA,CAACF,EAAS,CAAE,MAAA2B,EAAO,SAAAtC,KAAe,CAChD,MAAMuB,EAAYe,EACd,MAAM,QAAQA,CAAK,EACjBA,EACA,WAAYA,EACZ,MAAM,KAAKA,CAAK,EAChB,CAACA,CAAK,EACR,GACEG,EAAQ9B,EAAQ,MAAQY,EAAU,OAAO,CAACgB,EAAKC,IAASD,EAAMC,EAAK,KAAM,CAAC,EAC1ExB,EAAW,KAAK,MAAOL,EAAQ,OAAS,IAAO8B,CAAK,EACnD,MAAA,CACL,MAAO,CACL,GAAG9B,EAAQ,MACX,GAAGY,EAAU,IAAKN,GAChByB,EAAA,MACEjC,EAAA,EACG,WAAW,CACV,QAAS,CACP,aAAcuB,EAAW,CAAClB,EAAG,CAAE,UAAAS,MAAiB,CAC9C,KAAM,kBACN,UAAAA,CAAA,EACA,EACF,SAAUS,EAAW,aAAa,EAClC,UAAWA,EAAW,cAAc,EACpC,YAAaA,EAAW,QAAQ,CAClC,CAAA,CACD,EACA,YAAY,CAAE,GAAGxB,EAAsB,KAAAS,EAAM,SAAAjB,EAAU,EAC1D,CAAE,KAAM,EAAK,CACf,CACF,CACF,EACA,MAAAyC,EACA,OAAQ9B,EAAQ,OAChB,SAAAK,CAAA,CACF,CACD,EACD,WAAYH,EAAAA,OAAO,CACjB,MAAQF,GACNA,EAAQ,MAAM,OAAQwB,GAAQ,SAC5B,MAAMQ,GAAUjB,EAAAS,EAAI,YAAY,IAAhB,YAAAT,EAAmB,QAAQ,WAC3C,OAAIiB,KACFf,EAAAO,EAAI,OAAJ,MAAAP,EAAA,KAAAO,IAEK,CAACQ,CAAA,CACT,CAAA,CACJ,EACD,UAAWZ,EAAMpB,GACfA,EAAQ,MAAM,IAAKwB,GAAQS,EAAA,KAAK,CAAE,KAAM,SAAa,EAAA,CAAE,GAAIT,EAAI,EAAI,CAAA,CAAC,CACtE,EACA,OAAQJ,EAAK,CAACpB,EAASC,IAAUD,EAAQ,MAAM,IAAKwB,GAAQS,EAAAA,KAAKhC,EAAO,CAAE,GAAIuB,EAAI,EAAI,CAAA,CAAC,CAAC,EACxF,OAAQJ,EAAMpB,GACZA,EAAQ,MAAM,IAAKwB,GAAQS,EAAA,KAAK,CAAE,KAAM,QAAY,EAAA,CAAE,GAAIT,EAAI,EAAI,CAAA,CAAC,CACrE,CACF,CACF,CAAA,EClJSU,EAAoB,MAC/BC,EACAC,EACArD,IAEA,IAAI,QAAkCsD,GAAY,CAChDD,EAAY,KAAK,CACf,KAAM,SACN,IAAKD,EAAM,QAAQ,IACnB,YAAaA,EAAM,KAAK,eAAe,EACvC,YAAaA,EAAM,YACnB,GAAGpD,CAAA,CACJ,EACWqD,EAAA,UAAWE,GAAM,OACvBA,EAAE,QAAQ,OAAO,EACXD,EAAA,CACN,MAAOC,EAAE,QAAQ,MACjB,QAAS,GACT,WAAY,EAAA,CACb,EACQA,EAAE,QAAQ,UAAU,GACrBD,EAAA,CACN,MAAO,KACP,QAAS,GACT,WAAY,GACZ,GAAIC,EAAE,QAAQ,GACd,SAAUA,EAAE,QAAQ,GACpB,MAAMvB,EAAAuB,EAAE,QAAQ,OAAV,YAAAvB,EAAgB,IAAA,CACvB,CACH,CACD,CACH,CAAC,ECzBUwB,EAA6B,MACxCJ,EACAK,EACAzD,IAEA,IAAI,QAASsD,GAAY,CACvBG,EAAQ,KAAK,CACX,KAAM,SACN,IAAKL,EAAM,QAAQ,IACnB,YAAaA,EAAM,KAAK,eAAe,EACvC,YAAaA,EAAM,YACnB,SAAUpD,GAAA,YAAAA,EAAQ,SAClB,MAAOA,GAAA,YAAAA,EAAQ,KAAA,CAChB,EACOyD,EAAA,aAAcF,GAAM,CACtBA,EAAE,QAAQ,OAAO,EACXD,EAAA,CACN,OAAQC,EAAE,QAAQ,MAAM,OAAQd,GAAA,OAAQ,OAAAT,EAAAS,EAAI,gBAAJ,YAAAT,EAAmB,QAAQ,MAAK,EACxE,QAAS,GACT,MAAO,CAAC,CAAA,CACT,EACQuB,EAAE,QAAQ,UAAU,GACrBD,EAAA,CAAE,OAAQ,CAAI,EAAA,QAAS,GAAO,MAAOC,EAAE,QAAQ,KAAA,CAAO,CAChE,CACD,CACH,CAAC"}