{"version":3,"file":"index.esm.js","sources":["../src/hasura-storage-api.ts","../src/hasura-storage-client.ts","../src/machines/file-upload.ts","../src/machines/multiple-files-upload.ts","../src/promises/file-upload.ts","../src/promises/multiple-files-upload.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport axios, { AxiosInstance } from 'axios'\n\nimport {\n  ApiDeleteParams,\n  ApiDeleteResponse,\n  ApiGetPresignedUrlParams,\n  ApiGetPresignedUrlResponse,\n  ApiUploadParams,\n  ApiUploadResponse,\n  UploadHeaders\n} from './utils/types'\n\n/**\n * @internal\n * This is an internal class.\n */\nexport class HasuraStorageApi {\n  private url: string\n  private httpClient: AxiosInstance\n  private accessToken?: string\n  private adminSecret?: string\n\n  constructor({ url }: { url: string }) {\n    this.url = url\n\n    this.httpClient = axios.create({\n      baseURL: this.url,\n      maxBodylength: Infinity\n    })\n  }\n\n  async upload(params: ApiUploadParams): Promise<ApiUploadResponse> {\n    const { formData } = params\n\n    try {\n      const res = await this.httpClient.post('/files', formData, {\n        headers: {\n          ...this.generateUploadHeaders(params),\n          ...this.generateAuthHeaders(),\n          'Content-Type': 'multipart/form-data'\n        }\n      })\n\n      return { fileMetadata: res.data, error: null }\n    } catch (error) {\n      return { fileMetadata: null, error: error as Error }\n    }\n  }\n\n  async getPresignedUrl(params: ApiGetPresignedUrlParams): Promise<ApiGetPresignedUrlResponse> {\n    try {\n      const { fileId } = params\n      const res = await this.httpClient.get(`/files/${fileId}/presignedurl`, {\n        headers: {\n          ...this.generateAuthHeaders()\n        }\n      })\n      return { presignedUrl: res.data, error: null }\n    } catch (error) {\n      return { presignedUrl: null, error: error as Error }\n    }\n  }\n\n  async delete(params: ApiDeleteParams): Promise<ApiDeleteResponse> {\n    try {\n      const { fileId } = params\n      await this.httpClient.delete(`/files/${fileId}`, {\n        headers: {\n          ...this.generateAuthHeaders()\n        }\n      })\n      return { error: null }\n    } catch (error) {\n      return { error: error as Error }\n    }\n  }\n\n  /**\n   * Set the access token to use for authentication.\n   *\n   * @param accessToken Access token\n   * @returns Hasura Storage API instance\n   */\n  setAccessToken(accessToken?: string): HasuraStorageApi {\n    this.accessToken = accessToken\n\n    return this\n  }\n\n  /**\n   * Set the admin secret to use for authentication.\n   *\n   * @param adminSecret Hasura admin secret\n   * @returns Hasura Storage API instance\n   */\n  setAdminSecret(adminSecret?: string): HasuraStorageApi {\n    this.adminSecret = adminSecret\n\n    return this\n  }\n\n  private generateUploadHeaders(params: ApiUploadParams): UploadHeaders {\n    const { bucketId, name, id } = params\n    const uploadheaders: UploadHeaders = {}\n\n    if (bucketId) {\n      uploadheaders['x-nhost-bucket-id'] = bucketId\n    }\n    if (id) {\n      uploadheaders['x-nhost-file-id'] = id\n    }\n    if (name) {\n      uploadheaders['x-nhost-file-name'] = name\n    }\n\n    return uploadheaders\n  }\n\n  private generateAuthHeaders():\n    | { Authorization: string }\n    | { 'x-hasura-admin-secret': string }\n    | null {\n    if (!this.adminSecret && !this.accessToken) {\n      return null\n    }\n\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n\n    return {\n      Authorization: `Bearer ${this.accessToken}`\n    }\n  }\n}\n","import FormData from 'form-data'\n\nimport {\n  StorageDeleteParams,\n  StorageDeleteResponse,\n  StorageGetPresignedUrlParams,\n  StorageGetPresignedUrlResponse,\n  StorageGetUrlParams,\n  StorageUploadFileParams,\n  StorageUploadFormDataParams,\n  StorageUploadParams,\n  StorageUploadResponse\n} from './utils/types'\nimport { HasuraStorageApi } from './hasura-storage-api'\n\ninterface NhostStorageConstructorParams {\n  /**\n   * Storage endpoint.\n   */\n  url: string\n  /**\n   * Admin secret. When set, it is sent as an `x-hasura-admin-secret` header for all requests.\n   */\n  adminSecret?: string\n}\n/**\n * @alias Storage\n */\nexport class HasuraStorageClient {\n  readonly url: string\n  private api: HasuraStorageApi\n\n  constructor({ url, adminSecret }: NhostStorageConstructorParams) {\n    this.url = url\n    this.api = new HasuraStorageApi({ url })\n    this.setAdminSecret(adminSecret)\n  }\n\n  /**\n   * Use `nhost.storage.upload` to upload a file. \n   * \n   * It's possible to use [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) or [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) to upload a file. The `File` instance is only available in the browser while `FormData` with [`form-data`](https://www.npmjs.com/package/form-data) works both in the browser and in NodeJS (server).\n   * \n   * If no `bucketId` is specified the bucket `default` is used.\n   *\n   * @example\n   * \n   * Upload a file from a browser using `File`.\n   * \n   * ```ts\n   * await nhost.storage.upload({ file })\n   * ```\n   * \n   * Upload a file from a browser using `File` to a specific Bucket.\n   * \n    @example\n   * ```ts\n   * await nhost.storage.upload({ file, bucketId: '<Bucket-ID>' })\n   * ```\n   * \n   * Upload a file from a server using `FormData` with [`form-data`](https://www.npmjs.com/package/form-data).\n   *\n   * @example\n   * ```ts\n   * const fd = new FormData() \n   * fd.append('file', fs.createReadStream('./tests/assets/sample.pdf'))\n   * \n   * await storage.upload({\n   *   formData: fd\n   * })\n   * ```\n   * \n   * @docs https://docs.nhost.io/reference/javascript/storage/upload\n   */\n\n  async upload(params: StorageUploadFileParams): Promise<StorageUploadResponse>\n  async upload(params: StorageUploadFormDataParams): Promise<StorageUploadResponse>\n  async upload(params: StorageUploadParams): Promise<StorageUploadResponse> {\n    let formData: FormData\n\n    if ('file' in params) {\n      formData = new FormData()\n      formData.append('file', params.file)\n    } else {\n      formData = params.formData\n    }\n\n    const { fileMetadata, error } = await this.api.upload({\n      ...params,\n      formData: formData\n    })\n    if (error) {\n      return { fileMetadata: null, error }\n    }\n\n    if (!fileMetadata) {\n      return { fileMetadata: null, error: new Error('Invalid file returned') }\n    }\n\n    return { fileMetadata, error: null }\n  }\n\n  /**\n   * @deprecated Use `nhost.storage.getPublicUrl()` instead.\n   */\n  getUrl(params: StorageGetUrlParams): string {\n    return this.getPublicUrl(params)\n  }\n\n  /**\n   * Use `nhost.storage.getPublicUrl` to get the public URL of a file. The public URL can be used for un-authenticated users to access files. To access public files the `public` role must have permissions to select the file in the `storage.files` table.\n   *\n   * @example\n   * ```ts\n   * const publicUrl = nhost.storage.getPublicUrl({ fileId: '<File-ID>' })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/get-public-url\n   */\n  getPublicUrl(params: StorageGetUrlParams): string {\n    const { fileId } = params\n    return `${this.url}/files/${fileId}`\n  }\n\n  /**\n   * Use `nhost.storage.getPresignedUrl` to get a presigned URL of a file. To get a presigned URL the user must have permission to select the file in the `storage.files` table.\n   *\n   * @example\n   * ```ts\n   * const { presignedUrl, error} = await nhost.storage.getPresignedUrl({ fileId: '<File-ID>' })\n   *\n   * if (error) {\n   *   throw error;\n   * }\n   *\n   * console.log('url: ', presignedUrl.url)\n   * console.log('expiration: ', presignedUrl.expiration)\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/get-presigned-url\n   */\n  async getPresignedUrl(\n    params: StorageGetPresignedUrlParams\n  ): Promise<StorageGetPresignedUrlResponse> {\n    const { presignedUrl, error } = await this.api.getPresignedUrl(params)\n    if (error) {\n      return { presignedUrl: null, error }\n    }\n\n    if (!presignedUrl) {\n      return { presignedUrl: null, error: new Error('Invalid file id') }\n    }\n\n    return { presignedUrl, error: null }\n  }\n\n  /**\n   * Use `nhost.storage.delete` to delete a file. To delete a file the user must have permissions to delete the file in the `storage.files` table. Deleting the file using `nhost.storage.delete()` will delete both the file and its metadata.\n   *\n   * @example\n   * ```ts\n   * const { error } = await nhost.storage.delete({ fileId: 'uuid' })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/delete\n   */\n  async delete(params: StorageDeleteParams): Promise<StorageDeleteResponse> {\n    const { error } = await this.api.delete(params)\n    if (error) {\n      return { error }\n    }\n\n    return { error: null }\n  }\n\n  /**\n   * Use `nhost.storage.setAccessToken` to a set an access token to be used in subsequent storage requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.storage.setAccessToken('some-access-token')\n   * ```\n   *\n   * @param accessToken Access token\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/set-access-token\n   */\n  setAccessToken(accessToken?: string): HasuraStorageClient {\n    this.api.setAccessToken(accessToken)\n\n    return this\n  }\n\n  /**\n   * Use `nhost.storage.adminSecret` to set the admin secret to be used for subsequent storage requests. This is useful if you want to run storage in \"admin mode\".\n   *\n   * @example\n   * ```ts\n   * nhost.storage.setAdminSecret('some-admin-secret')\n   * ```\n   *\n   * @param adminSecret Hasura admin secret\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/set-admin-secret\n   */\n  setAdminSecret(adminSecret?: string): HasuraStorageClient {\n    this.api.setAdminSecret(adminSecret)\n\n    return this\n  }\n}\n","import axios, { AxiosError, AxiosRequestHeaders } from 'axios'\nimport { assign, createMachine } from 'xstate'\n\nimport { ErrorPayload } from '@nhost/core'\n\nexport type FileUploadContext = {\n  progress: number | null\n  loaded: number\n  error: ErrorPayload | null\n  id?: string\n  bucketId?: string\n  file?: File\n}\n\nexport type FileUploadEvents =\n  | { type: 'ADD'; file: File; id?: string; bucketId?: string; name?: string }\n  | {\n      type: 'UPLOAD'\n      url: string\n      file?: File\n      id?: string\n      bucketId?: string\n      name?: string\n      accessToken?: string\n      adminSecret?: string\n    }\n  | { type: 'UPLOAD_PROGRESS'; progress: number; loaded: number; additions: number }\n  | { type: 'UPLOAD_DONE'; id: string; bucketId: string }\n  | { type: 'UPLOAD_ERROR'; error: ErrorPayload }\n  | { type: 'CANCEL' }\n  | { type: 'DESTROY' }\n\nexport const INITIAL_FILE_CONTEXT: FileUploadContext = { progress: null, loaded: 0, error: null }\n\nexport type FileUploadMachine = ReturnType<typeof createFileUploadMachine>\nexport const createFileUploadMachine = () =>\n  createMachine(\n    {\n      predictableActionArguments: true,\n      schema: {\n        context: {} as FileUploadContext,\n        events: {} as FileUploadEvents\n      },\n      tsTypes: {} as import('./file-upload.typegen').Typegen0,\n      context: { ...INITIAL_FILE_CONTEXT },\n      initial: 'idle',\n      on: {\n        DESTROY: { actions: 'sendDestroy', target: 'stopped' }\n      },\n      states: {\n        idle: {\n          on: {\n            ADD: { actions: 'addFile' },\n            UPLOAD: { cond: 'hasFile', target: 'uploading' }\n          }\n        },\n        uploading: {\n          entry: 'resetProgress',\n          on: {\n            UPLOAD_PROGRESS: { actions: ['incrementProgress', 'sendProgress'] },\n            UPLOAD_DONE: 'uploaded',\n            UPLOAD_ERROR: 'error',\n            CANCEL: 'idle'\n          },\n          invoke: { src: 'uploadFile' }\n        },\n        uploaded: { entry: ['setFileMetadata', 'sendDone'] },\n        error: { entry: ['setError', 'sendError'] },\n        stopped: { type: 'final' }\n      }\n    },\n    {\n      guards: {\n        hasFile: (context, event) => !!context.file || !!event.file\n      },\n\n      actions: {\n        incrementProgress: assign({\n          loaded: (_, { loaded }) => loaded,\n          progress: (_, { progress }) => progress\n        }),\n        setFileMetadata: assign({\n          id: (_, { id }) => id,\n          bucketId: (_, { bucketId }) => bucketId,\n          progress: (_) => 100\n        }),\n        setError: assign({ error: (_, { error }) => error }),\n        sendProgress: () => {},\n        sendError: () => {},\n        sendDestroy: () => {},\n        sendDone: () => {},\n        resetProgress: assign({ progress: (_) => null, loaded: (_) => 0 }),\n        addFile: assign({\n          file: (_, { file }) => file,\n          bucketId: (_, { bucketId }) => bucketId,\n          id: (_, { id }) => id\n        })\n      },\n      services: {\n        uploadFile: (context, event) => (callback) => {\n          const headers: AxiosRequestHeaders = {\n            'Content-Type': 'multipart/form-data'\n          }\n          const fileId = event.id || context.id\n          if (fileId) {\n            headers['x-nhost-file-id'] = fileId\n          }\n          const bucketId = event.bucketId || context.bucketId\n          if (bucketId) {\n            headers['x-nhost-bucket-id'] = bucketId\n          }\n          const file = (event.file || context.file)!\n          headers['x-nhost-file-name'] = event.name || file.name\n          const data = new FormData()\n          data.append('file', file)\n          if (event.adminSecret) {\n            headers['x-hasura-admin-secret'] = event.adminSecret\n          }\n          if (event.accessToken) {\n            headers['Authorization'] = `Bearer ${event.accessToken}`\n          }\n          let currentLoaded = 0\n          const controller = new AbortController()\n          axios\n            .post<{\n              bucketId: string\n              createdAt: string\n              etag: string\n              id: string\n              isUploaded: true\n              mimeType: string\n              name: string\n              size: number\n              updatedAt: string\n              uploadedByUserId: string\n            }>(event.url + '/files', data, {\n              headers,\n              signal: controller.signal,\n              onUploadProgress: (event: ProgressEvent) => {\n                const loaded = Math.round((event.loaded * file.size!) / event.total)\n                const additions = loaded - currentLoaded\n                currentLoaded = loaded\n                callback({\n                  type: 'UPLOAD_PROGRESS',\n                  progress: Math.round((loaded * 100) / event.total),\n                  loaded,\n                  additions\n                })\n              }\n            })\n            .then(({ data: { id, bucketId } }) => {\n              callback({ type: 'UPLOAD_DONE', id, bucketId })\n            })\n            .catch(({ response, message }: AxiosError<{ error?: { message: string } }>) => {\n              callback({\n                type: 'UPLOAD_ERROR',\n                error: {\n                  status: response?.status ?? 0,\n                  message: response?.data?.error?.message || message,\n                  // TODO errors from hasura-storage are not codified\n                  error: response?.data?.error?.message || message\n                }\n              })\n            })\n\n          return () => {\n            controller.abort()\n          }\n        }\n      }\n    }\n  )\n","import { actions, ActorRefFrom, assign, createMachine, send, spawn } from 'xstate'\n\nimport { createFileUploadMachine, FileUploadMachine, INITIAL_FILE_CONTEXT } from './file-upload'\n\nconst { pure, sendParent } = actions\n\nexport type FileItemRef = ActorRefFrom<FileUploadMachine>\n\nexport type AnyFileList = File | File[] | FileList\n\nexport type MultipleFilesUploadContext = {\n  progress: number | null\n  files: FileItemRef[]\n  loaded: number\n  total: number\n}\n\nexport type MultipleFilesUploadEvents =\n  | { type: 'ADD'; files: AnyFileList; bucketId?: string }\n  | {\n      type: 'UPLOAD'\n      url: string\n      files?: AnyFileList\n      bucketId?: string\n      accessToken?: string\n      adminSecret?: string\n    }\n  | { type: 'UPLOAD_PROGRESS'; additions: number }\n  | { type: 'UPLOAD_DONE' }\n  | { type: 'UPLOAD_ERROR' }\n  | { type: 'CANCEL' }\n  | { type: 'REMOVE' }\n  | { type: 'CLEAR' }\n\nexport type MultipleFilesUploadMachine = ReturnType<typeof createMultipleFilesUploadMachine>\n\nexport const createMultipleFilesUploadMachine = () => {\n  return createMachine(\n    {\n      id: 'files-list',\n      schema: {\n        context: {} as MultipleFilesUploadContext,\n        events: {} as MultipleFilesUploadEvents\n      },\n      tsTypes: {} as import('./multiple-files-upload.typegen').Typegen0,\n      predictableActionArguments: true,\n      context: {\n        progress: null,\n        files: [],\n        loaded: 0,\n        total: 0\n      },\n      initial: 'idle',\n      on: {\n        UPLOAD: { cond: 'hasFileToDownload', actions: 'addItem', target: 'uploading' },\n        ADD: { actions: 'addItem' },\n        REMOVE: { actions: 'removeItem' }\n      },\n      states: {\n        idle: {\n          entry: ['resetProgress', 'resetLoaded', 'resetTotal'],\n          on: {\n            CLEAR: { actions: 'clearList', target: 'idle' }\n          }\n        },\n        uploading: {\n          entry: ['upload', 'startProgress', 'resetLoaded', 'resetTotal'],\n          on: {\n            UPLOAD_PROGRESS: { actions: ['incrementProgress'] },\n            UPLOAD_DONE: [\n              { cond: 'isAllUploaded', target: 'uploaded' },\n              { cond: 'isAllUploadedOrError', target: 'error' }\n            ],\n            UPLOAD_ERROR: [\n              { cond: 'isAllUploaded', target: 'uploaded' },\n              { cond: 'isAllUploadedOrError', target: 'error' }\n            ],\n            CANCEL: { actions: 'cancel', target: 'idle' }\n          }\n        },\n        uploaded: {\n          entry: 'setUploaded',\n          on: {\n            CLEAR: { actions: 'clearList', target: 'idle' }\n          }\n        },\n        error: {\n          on: {\n            CLEAR: { actions: 'clearList', target: 'idle' }\n          }\n        }\n      }\n    },\n    {\n      guards: {\n        hasFileToDownload: (context, event) =>\n          context.files.some((ref) => ref.getSnapshot()!.matches('idle')) || !!event.files,\n        isAllUploaded: (context) =>\n          context.files.every((item) => item.getSnapshot()?.matches('uploaded')),\n        isAllUploadedOrError: (context) =>\n          context.files.every((item) => {\n            const snap = item.getSnapshot()\n            return snap?.matches('error') || snap?.matches('uploaded')\n          })\n      },\n\n      actions: {\n        incrementProgress: assign((context, event) => {\n          const loaded: number = context.loaded + event.additions\n          const progress = Math.round((loaded * 100) / context.total)\n          return { ...context, loaded, progress }\n        }),\n        setUploaded: assign({\n          progress: (_) => 100,\n          loaded: ({ files }) =>\n            files\n              .map((ref) => ref.getSnapshot()!)\n              .filter((snap) => snap.matches('uploaded'))\n              .reduce((agg, curr) => agg + curr.context.file?.size!, 0)\n        }),\n        resetTotal: assign({\n          total: ({ files }) =>\n            files\n              .map((ref) => ref.getSnapshot()!)\n              .filter((snap) => !snap.matches('uploaded'))\n              .reduce((agg, curr) => agg + curr.context.file?.size!, 0)\n        }),\n        resetLoaded: assign({ loaded: (_) => 0 }),\n        startProgress: assign({ progress: (_) => 0 }),\n        resetProgress: assign({ progress: (_) => null }),\n        addItem: assign((context, { files, bucketId }) => {\n          const additions = files\n            ? Array.isArray(files)\n              ? files // File[]\n              : 'length' in files // FileList\n              ? Array.from(files)\n              : [files] // File\n            : [] // No file\n          const total = context.total + additions.reduce((agg, curr) => agg + curr.size, 0)\n          const progress = Math.round((context.loaded * 100) / total)\n          return {\n            files: [\n              ...context.files,\n              ...additions.map((file) =>\n                spawn(\n                  createFileUploadMachine()\n                    .withConfig({\n                      actions: {\n                        sendProgress: sendParent((_, { additions }) => ({\n                          type: 'UPLOAD_PROGRESS',\n                          additions\n                        })),\n                        sendDone: sendParent('UPLOAD_DONE'),\n                        sendError: sendParent('UPLOAD_ERROR'),\n                        sendDestroy: sendParent('REMOVE')\n                      }\n                    })\n                    .withContext({ ...INITIAL_FILE_CONTEXT, file, bucketId }),\n                  { sync: true }\n                )\n              )\n            ],\n            total,\n            loaded: context.loaded,\n            progress\n          }\n        }),\n        removeItem: assign({\n          files: (context) =>\n            context.files.filter((ref) => {\n              const stopped = ref.getSnapshot()?.matches('stopped')\n              if (stopped) {\n                ref.stop?.()\n              }\n              return !stopped\n            })\n        }),\n        clearList: pure((context) =>\n          context.files.map((ref) => send({ type: 'DESTROY' }, { to: ref.id }))\n        ),\n        upload: pure((context, event) => context.files.map((ref) => send(event, { to: ref.id }))),\n        cancel: pure((context) =>\n          context.files.map((ref) => send({ type: 'CANCEL' }, { to: ref.id }))\n        )\n      }\n    }\n  )\n}\n","import { InterpreterFrom } from 'xstate'\n\nimport { ActionErrorState } from '@nhost/core'\n\nimport { FileItemRef, FileUploadMachine } from '../machines'\nimport { NhostClientReturnType, StorageUploadFileParams } from '../utils/types'\n\nexport interface UploadProgressState {\n  /**\n   * Returns `true` when the file is being uploaded.\n   */\n  isUploading: boolean\n  /**\n   * Returns the progress of the upload, from 0 to 100. Returns null if the upload has not started yet.\n   */\n  progress: number | null\n}\n\nexport interface UploadFileHandlerResult extends ActionErrorState {\n  /**\n   * Returns `true` when the file has been successfully uploaded.\n   */\n  isUploaded: boolean\n  /**\n   * Returns the id of the file.\n   */\n  id?: string\n  /**\n   * Returns the bucket id.\n   */\n  bucketId?: string\n  /**\n   * Returns the name of the file.\n   */\n  name?: string\n}\n\nexport interface FileUploadState extends UploadFileHandlerResult, UploadProgressState {}\n\nexport const uploadFilePromise = async (\n  nhost: NhostClientReturnType,\n  interpreter: FileItemRef | InterpreterFrom<FileUploadMachine>,\n  params: Partial<StorageUploadFileParams>\n): Promise<UploadFileHandlerResult> =>\n  new Promise<UploadFileHandlerResult>((resolve) => {\n    interpreter.send({\n      type: 'UPLOAD',\n      url: nhost.storage.url,\n      accessToken: nhost.auth.getAccessToken(),\n      adminSecret: nhost.adminSecret,\n      ...params\n    })\n    interpreter.subscribe((s) => {\n      if (s.matches('error')) {\n        resolve({\n          error: s.context.error,\n          isError: true,\n          isUploaded: false\n        })\n      } else if (s.matches('uploaded')) {\n        resolve({\n          error: null,\n          isError: false,\n          isUploaded: true,\n          id: s.context.id,\n          bucketId: s.context.id,\n          name: s.context.file?.name\n        })\n      }\n    })\n  })\n","import { InterpreterFrom } from 'xstate'\n\nimport { AnyFileList, FileItemRef, MultipleFilesUploadMachine } from '../machines'\nimport { NhostClientReturnType } from '../utils/types'\n\nexport interface MultipleUploadProgressState {\n  /**\n   * Returns `true` when the files are being uploaded.\n   */\n  isUploading: boolean\n  /**\n   * Returns the overall progress of the upload, from 0 to 100. Returns null if the upload has not started yet.\n   */\n  progress: number | null\n}\n\nexport interface MultipleFilesHandlerResult {\n  /**\n   * The list of file uploads. The properties can be accessed through `item.getSnapshot()` of with the `useFileUploadItem` hook.\n   */\n  files: FileItemRef[]\n  /**\n   * Returns `true` when all upload request are processed, but at least one of them has failed.\n   */\n  isError: boolean\n  /**\n   * Returns the list of file uploads that have failed\n   */\n  errors: FileItemRef[]\n}\n\nexport interface MultipleFilesUploadState\n  extends MultipleFilesHandlerResult,\n    MultipleUploadProgressState {\n  /**\n   * Returns `true` when all the files have been successfully uploaded.\n   */\n  isUploaded: boolean\n}\n\nexport type UploadMultipleFilesActionParams = {\n  files?: AnyFileList\n  bucketId?: string\n}\n\nexport const uploadMultipleFilesPromise = async (\n  nhost: NhostClientReturnType,\n  service: InterpreterFrom<MultipleFilesUploadMachine>,\n  params?: UploadMultipleFilesActionParams\n): Promise<MultipleFilesHandlerResult> =>\n  new Promise((resolve) => {\n    service.send({\n      type: 'UPLOAD',\n      url: nhost.storage.url,\n      accessToken: nhost.auth.getAccessToken(),\n      adminSecret: nhost.adminSecret,\n      bucketId: params?.bucketId,\n      files: params?.files\n    })\n    service.onTransition((s) => {\n      if (s.matches('error')) {\n        resolve({\n          errors: s.context.files.filter((ref) => ref.getSnapshot()?.context.error),\n          isError: true,\n          files: []\n        })\n      } else if (s.matches('uploaded')) {\n        resolve({ errors: [], isError: false, files: s.context.files })\n      }\n    })\n  })\n"],"names":["HasuraStorageApi","url","__publicField","axios","params","formData","error","fileId","accessToken","adminSecret","bucketId","name","id","uploadheaders","HasuraStorageClient","FormData","fileMetadata","presignedUrl","INITIAL_FILE_CONTEXT","createFileUploadMachine","createMachine","context","event","assign","_","loaded","progress","file","callback","headers","data","currentLoaded","controller","additions","response","message","_a","_c","_b","_e","_d","pure","sendParent","actions","createMultipleFilesUploadMachine","ref","item","snap","files","agg","curr","total","spawn","stopped","send","uploadFilePromise","nhost","interpreter","resolve","s","uploadMultipleFilesPromise","service"],"mappings":"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"}