"use strict";var L=Object.defineProperty;var T=(r,e,t)=>e in r?L(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var c=(r,e,t)=>(T(r,typeof e!="symbol"?e+"":e,t),t);Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const I=require("axios"),R=require("form-data"),i=require("xstate"),D=r=>r&&typeof r=="object"&&"default"in r?r:{default:r},_=D(I),k=D(R);class O{constructor({url:e}){c(this,"url");c(this,"httpClient");c(this,"accessToken");c(this,"adminSecret");this.url=e,this.httpClient=_.default.create({baseURL:this.url,maxBodylength:1/0})}async upload(e){const{formData:t}=e;try{return{fileMetadata:(await this.httpClient.post("/files",t,{headers:{...this.generateUploadHeaders(e),...this.generateAuthHeaders(),"Content-Type":"multipart/form-data"}})).data,error:null}}catch(s){return{fileMetadata:null,error:s}}}async getPresignedUrl(e){try{const{fileId:t}=e;return{presignedUrl:(await this.httpClient.get(`/files/${t}/presignedurl`,{headers:{...this.generateAuthHeaders()}})).data,error:null}}catch(t){return{presignedUrl:null,error:t}}}async delete(e){try{const{fileId:t}=e;return await this.httpClient.delete(`/files/${t}`,{headers:{...this.generateAuthHeaders()}}),{error:null}}catch(t){return{error:t}}}setAccessToken(e){return this.accessToken=e,this}setAdminSecret(e){return this.adminSecret=e,this}generateUploadHeaders(e){const{bucketId:t,name:s,id:a}=e,n={};return t&&(n["x-nhost-bucket-id"]=t),a&&(n["x-nhost-file-id"]=a),s&&(n["x-nhost-file-name"]=s),n}generateAuthHeaders(){return!this.adminSecret&&!this.accessToken?null:this.adminSecret?{"x-hasura-admin-secret":this.adminSecret}:{Authorization:`Bearer ${this.accessToken}`}}}class M{constructor({url:e,adminSecret:t}){c(this,"url");c(this,"api");this.url=e,this.api=new O({url:e}),this.setAdminSecret(t)}async upload(e){let t;"file"in e?(t=new k.default,t.append("file",e.file)):t=e.formData;const{fileMetadata:s,error:a}=await this.api.upload({...e,formData:t});return a?{fileMetadata:null,error:a}:s?{fileMetadata:s,error:null}:{fileMetadata:null,error:new Error("Invalid file returned")}}getUrl(e){return this.getPublicUrl(e)}getPublicUrl(e){const{fileId:t}=e;return`${this.url}/files/${t}`}async getPresignedUrl(e){const{presignedUrl:t,error:s}=await this.api.getPresignedUrl(e);return s?{presignedUrl:null,error:s}:t?{presignedUrl:t,error:null}:{presignedUrl:null,error:new Error("Invalid file id")}}async delete(e){const{error:t}=await this.api.delete(e);return t?{error:t}:{error:null}}setAccessToken(e){return this.api.setAccessToken(e),this}setAdminSecret(e){return this.api.setAdminSecret(e),this}}const m={progress:null,loaded:0,error:null},S=()=>i.createMachine({predictableActionArguments:!0,schema:{context:{},events:{}},tsTypes:{},context:{...m},initial:"idle",on:{DESTROY:{actions:"sendDestroy",target:"stopped"}},states:{idle:{on:{ADD:{actions:"addFile"},UPLOAD:{cond:"hasFile",target:"uploading"}}},uploading:{entry:"resetProgress",on:{UPLOAD_PROGRESS:{actions:["incrementProgress","sendProgress"]},UPLOAD_DONE:"uploaded",UPLOAD_ERROR:"error",CANCEL:"idle"},invoke:{src:"uploadFile"}},uploaded:{entry:["setFileMetadata","sendDone"]},error:{entry:["setError","sendError"]},stopped:{type:"final"}}},{guards:{hasFile:(r,e)=>!!r.file||!!e.file},actions:{incrementProgress:i.assign({loaded:(r,{loaded:e})=>e,progress:(r,{progress:e})=>e}),setFileMetadata:i.assign({id:(r,{id:e})=>e,bucketId:(r,{bucketId:e})=>e,progress:r=>100}),setError:i.assign({error:(r,{error:e})=>e}),sendProgress:()=>{},sendError:()=>{},sendDestroy:()=>{},sendDone:()=>{},resetProgress:i.assign({progress:r=>null,loaded:r=>0}),addFile:i.assign({file:(r,{file:e})=>e,bucketId:(r,{bucketId:e})=>e,id:(r,{id:e})=>e})},services:{uploadFile:(r,e)=>t=>{const s={"Content-Type":"multipart/form-data"},a=e.id||r.id;a&&(s["x-nhost-file-id"]=a);const n=e.bucketId||r.bucketId;n&&(s["x-nhost-bucket-id"]=n);const l=e.file||r.file;s["x-nhost-file-name"]=e.name||l.name;const u=new FormData;u.append("file",l),e.adminSecret&&(s["x-hasura-admin-secret"]=e.adminSecret),e.accessToken&&(s.Authorization=`Bearer ${e.accessToken}`);let g=0;const A=new AbortController;return _.default.post(e.url+"/files",u,{headers:s,signal:A.signal,onUploadProgress:o=>{const d=Math.round(o.loaded*l.size/o.total),p=d-g;g=d,t({type:"UPLOAD_PROGRESS",progress:Math.round(d*100/o.total),loaded:d,additions:p})}}).then(({data:{id:o,bucketId:d}})=>{t({type:"UPLOAD_DONE",id:o,bucketId:d})}).catch(({response:o,message:d})=>{var p,P,U,y,E;t({type:"UPLOAD_ERROR",error:{status:(p=o==null?void 0:o.status)!=null?p:0,message:((U=(P=o==null?void 0:o.data)==null?void 0:P.error)==null?void 0:U.message)||d,error:((E=(y=o==null?void 0:o.data)==null?void 0:y.error)==null?void 0:E.message)||d}})}),()=>{A.abort()}}}}),{pure:f,sendParent:h}=i.actions,b=()=>i.createMachine({id:"files-list",schema:{context:{},events:{}},tsTypes:{},predictableActionArguments:!0,context:{progress:null,files:[],loaded:0,total:0},initial:"idle",on:{UPLOAD:{cond:"hasFileToDownload",actions:"addItem",target:"uploading"},ADD:{actions:"addItem"},REMOVE:{actions:"removeItem"}},states:{idle:{entry:["resetProgress","resetLoaded","resetTotal"],on:{CLEAR:{actions:"clearList",target:"idle"}}},uploading:{entry:["upload","startProgress","resetLoaded","resetTotal"],on:{UPLOAD_PROGRESS:{actions:["incrementProgress"]},UPLOAD_DONE:[{cond:"isAllUploaded",target:"uploaded"},{cond:"isAllUploadedOrError",target:"error"}],UPLOAD_ERROR:[{cond:"isAllUploaded",target:"uploaded"},{cond:"isAllUploadedOrError",target:"error"}],CANCEL:{actions:"cancel",target:"idle"}}},uploaded:{entry:"setUploaded",on:{CLEAR:{actions:"clearList",target:"idle"}}},error:{on:{CLEAR:{actions:"clearList",target:"idle"}}}}},{guards:{hasFileToDownload:(r,e)=>r.files.some(t=>t.getSnapshot().matches("idle"))||!!e.files,isAllUploaded:r=>r.files.every(e=>{var t;return(t=e.getSnapshot())==null?void 0:t.matches("uploaded")}),isAllUploadedOrError:r=>r.files.every(e=>{const t=e.getSnapshot();return(t==null?void 0:t.matches("error"))||(t==null?void 0:t.matches("uploaded"))})},actions:{incrementProgress:i.assign((r,e)=>{const t=r.loaded+e.additions,s=Math.round(t*100/r.total);return{...r,loaded:t,progress:s}}),setUploaded:i.assign({progress:r=>100,loaded:({files:r})=>r.map(e=>e.getSnapshot()).filter(e=>e.matches("uploaded")).reduce((e,t)=>{var s;return e+((s=t.context.file)==null?void 0:s.size)},0)}),resetTotal:i.assign({total:({files:r})=>r.map(e=>e.getSnapshot()).filter(e=>!e.matches("uploaded")).reduce((e,t)=>{var s;return e+((s=t.context.file)==null?void 0:s.size)},0)}),resetLoaded:i.assign({loaded:r=>0}),startProgress:i.assign({progress:r=>0}),resetProgress:i.assign({progress:r=>null}),addItem:i.assign((r,{files:e,bucketId:t})=>{const s=e?Array.isArray(e)?e:"length"in e?Array.from(e):[e]:[],a=r.total+s.reduce((l,u)=>l+u.size,0),n=Math.round(r.loaded*100/a);return{files:[...r.files,...s.map(l=>i.spawn(S().withConfig({actions:{sendProgress:h((u,{additions:g})=>({type:"UPLOAD_PROGRESS",additions:g})),sendDone:h("UPLOAD_DONE"),sendError:h("UPLOAD_ERROR"),sendDestroy:h("REMOVE")}}).withContext({...m,file:l,bucketId:t}),{sync:!0}))],total:a,loaded:r.loaded,progress:n}}),removeItem:i.assign({files:r=>r.files.filter(e=>{var s,a;const t=(s=e.getSnapshot())==null?void 0:s.matches("stopped");return t&&((a=e.stop)==null||a.call(e)),!t})}),clearList:f(r=>r.files.map(e=>i.send({type:"DESTROY"},{to:e.id}))),upload:f((r,e)=>r.files.map(t=>i.send(e,{to:t.id}))),cancel:f(r=>r.files.map(e=>i.send({type:"CANCEL"},{to:e.id})))}}),C=async(r,e,t)=>new Promise(s=>{e.send({type:"UPLOAD",url:r.storage.url,accessToken:r.auth.getAccessToken(),adminSecret:r.adminSecret,...t}),e.subscribe(a=>{var n;a.matches("error")?s({error:a.context.error,isError:!0,isUploaded:!1}):a.matches("uploaded")&&s({error:null,isError:!1,isUploaded:!0,id:a.context.id,bucketId:a.context.id,name:(n=a.context.file)==null?void 0:n.name})})}),F=async(r,e,t)=>new Promise(s=>{e.send({type:"UPLOAD",url:r.storage.url,accessToken:r.auth.getAccessToken(),adminSecret:r.adminSecret,bucketId:t==null?void 0:t.bucketId,files:t==null?void 0:t.files}),e.onTransition(a=>{a.matches("error")?s({errors:a.context.files.filter(n=>{var l;return(l=n.getSnapshot())==null?void 0:l.context.error}),isError:!0,files:[]}):a.matches("uploaded")&&s({errors:[],isError:!1,files:a.context.files})})});exports.HasuraStorageApi=O;exports.HasuraStorageClient=M;exports.INITIAL_FILE_CONTEXT=m;exports.createFileUploadMachine=S;exports.createMultipleFilesUploadMachine=b;exports.uploadFilePromise=C;exports.uploadMultipleFilesPromise=F;
//# sourceMappingURL=index.cjs.js.map
